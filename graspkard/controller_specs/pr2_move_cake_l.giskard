scope = {
	unitX = vec3(1,0,0);
	unitY = vec3(0,1,0);
	unitZ = vec3(0,0,1);

	# Controllable Joints
	j_shoulder_pan  = inputJoint("l_shoulder_pan_joint");
	j_shoulder_lift = inputJoint("l_shoulder_lift_joint");
	j_upper_arm_roll= inputJoint("l_upper_arm_roll_joint");
	j_elbow_flex    = inputJoint("l_elbow_flex_joint");
	j_forearm_roll  = inputJoint("l_forearm_roll_joint");
	j_wrist_flex    = inputJoint("l_wrist_flex_joint");
	j_wrist_roll    = inputJoint("l_wrist_roll_joint");
	j_gripper       = inputJoint("l_gripper_joint");

	# Non-Controllable joints
	j_torso_lift    = inputJoint("torso_lift_joint");

	plate = inputFrame("plate");
	plate_pos = plate.pos;

	cake = inputFrame("cake");
	cake_pos = cake.pos;

	torso_lift       = frame(rotation(unitX, 0), vec3(-0.05, 0, 0.739675 + j_torso_lift));
	shoulder_pan  = frame(rotation(unitZ, j_shoulder_pan),   vec3(0, 0.188, 0));
	shoulder_lift = frame(rotation(unitY, j_shoulder_lift),  vec3(0.1, 0, 0));
	upper_arm_roll= frame(rotation(unitX, j_upper_arm_roll), vec3(0, 0, 0));
	elbow_flex    = frame(rotation(unitY, j_elbow_flex),     vec3(0.4, 0, 0));
	forearm_roll  = frame(rotation(unitX, j_forearm_roll),   vec3(0, 0, 0));
	wrist_flex    = frame(rotation(unitY, j_wrist_flex),     vec3(0.321, 0, 0));
	wrist_roll    = frame(rotation(unitX, j_wrist_roll),     vec3(0, 0, 0));

	elbow = torso_lift * shoulder_pan * shoulder_lift * upper_arm_roll * elbow_flex ;
	wrist = elbow * forearm_roll * wrist_flex * wrist_roll;
	knife = wrist * inputFrame("knife_in_gripper");

	# 
	cpv = (plate_pos - cake_pos);          # Vector connecting cake and plate
	cpv2d = vec3(cpv.x, cpv.y, 0);         # cpv in xy plane
	cpv_dir_2d = cpv2d * (1 / norm(cpv2d)); # cpv2d with unit length

	x_align_goal = cross(cpv_dir_2d, unitZ); # Vector orthagonal to direction of xy movement and Z

	knife_rot = knife.rot;
	knife_align_x = abs(x_align_goal * (knife_rot * unitX));
	knife_align_x_err = 1 - knife_align_x;

	knife_align_y = abs(cpv_dir_2d * (knife_rot * unitY));
	knife_align_y_err = 1 - knife_align_y;

	knife_align_z = unitZ * (knife_rot * unitZ);
	knife_align_z_err = 1 - knife_align_z;

	knife_pos = knife.pos;
	knife_z = knife_pos.z;

	kcv = knife_pos - cake_pos;
	knife_orth_dist = kcv * x_align_goal;

	knife_goal_dist = norm(cpv2d) - kcv * cpv_dir_2d;

	# Limits, weights and the like
	negVelLimitTorso = -0.02;
	posVelLimitTorso =  0.02;
	negVelLimitArm   = -0.6;
	posVelLimitArm   =  0.6;

	weightGripper = 0.001;
	weightArm   = weightGripper * 10;
	weightTorso = weightArm * 10;

	weightPositionGoal = 1;
	weightRotationGoal = 4;

	feedback = knife_goal_dist;

	VIS__push_goal__plate_pos = cpv_dir_2d * -knife_goal_dist
}

controllableConstraints = {
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_shoulder_pan_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_shoulder_lift_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_upper_arm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_elbow_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_forearm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_wrist_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_wrist_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_gripper_joint")
}

softConstraints = {
	softConstraint(-knife_goal_dist, -knife_goal_dist, weightPositionGoal, knife_goal_dist, "Knife Goal Dist");
	softConstraint(knife_align_x_err, knife_align_x_err, weightRotationGoal, knife_align_x, "Knife align x");
	softConstraint(knife_align_y_err, knife_align_y_err, weightRotationGoal, knife_align_y, "Knife align y");
	softConstraint(knife_align_z_err, knife_align_z_err, weightRotationGoal, knife_align_z, "Knife align z");
	softConstraint(0,0, weightPositionGoal, knife_orth_dist, "Keep knife steady");
	softConstraint(0,0, weightPositionGoal, knife_z, "Keep knife level")
	#softConstraint(1, 1, weightRotationGoal, input(9), "Knife roll")
}	

hardConstraints = {
	hardConstraint(0.0115 - j_torso_lift, 0.325 - j_torso_lift, j_torso_lift);
	
	# # Right arm constraints
	hardConstraint(-2.1353 - j_shoulder_pan,  0.5646 - j_shoulder_pan,   j_shoulder_pan);
	hardConstraint(-0.3536 - j_shoulder_lift, 1.2963 - j_shoulder_lift,  j_shoulder_lift);
	hardConstraint(-3.75   - j_upper_arm_roll,  0.65 - j_upper_arm_roll, j_upper_arm_roll);
	hardConstraint(-2.1213 - j_elbow_flex,     -0.15 - j_elbow_flex,     j_elbow_flex);
	hardConstraint(-2.0    - j_wrist_flex,      -0.1 - j_wrist_flex,     j_wrist_flex)
}