scope = {
	unitX = vec3(1,0,0);
	unitY = vec3(0,1,0);
	unitZ = vec3(0,0,1);

	# Joint input
	j_torso_lift    = inputJoint("torso_lift_joint");

	j_shoulder_pan_r  = inputJoint("r_shoulder_pan_joint");
	j_shoulder_lift_r = inputJoint("r_shoulder_lift_joint");
	j_upper_arm_roll_r= inputJoint("r_upper_arm_roll_joint");
	j_elbow_flex_r    = inputJoint("r_elbow_flex_joint");
	j_forearm_roll_r  = inputJoint("r_forearm_roll_joint");
	j_wrist_flex_r    = inputJoint("r_wrist_flex_joint");
	j_wrist_roll_r    = inputJoint("r_gripper_joint");

	# goal input
	goal_frame = inputFrame("goal_r");
	pos_goal_r = goal_frame.pos;
	rot_goal_r = goal_frame.rot;

	r_gripper_palm_link = inputFrame("r_gripper_palm_link");

	# Collision points on r_forearm_roll_link
	r_forearm_link_ol = inputVec3("COLL:L:r_forearm_link");
	r_forearm_link_is = inputVec3("COLL:W:r_forearm_link");

	# Collision points on r_gripper_palm_link
	r_gripper_palm_link_ol = inputVec3("COLL:L:r_gripper_palm_link");
	r_gripper_palm_link_is = inputVec3("COLL:W:r_gripper_palm_link");

	# Robot
	torso_lift     = frame(rotation(unitX, 0),                vec3(-0.05, 0, 0.739675 + j_torso_lift));
	
	shoulder_pan_r   = frame(rotation(unitZ, j_shoulder_pan_r),   vec3(0, -0.188, 0));
	shoulder_lift_r  = frame(rotation(unitY, j_shoulder_lift_r),  vec3(0.1, 0, 0));
	upper_arm_roll_r = frame(rotation(unitX, j_upper_arm_roll_r), vec3(0, 0, 0));
	elbow_flex_r     = frame(rotation(unitY, j_elbow_flex_r),     vec3(0.4, 0, 0));
	forearm_roll_r   = frame(rotation(unitX, j_forearm_roll_r),   vec3(0, 0, 0));
	wrist_flex_r     = frame(rotation(unitY, j_wrist_flex_r),     vec3(0.321, 0, 0));
	wrist_roll_r     = frame(rotation(unitX, j_wrist_roll_r),     vec3(0, 0, 0));
	gripper_offset_r = frame(rotation(unitX, 0),                vec3(0.18, 0, 0));

	# Frame chains
	elbow_r = torso_lift * shoulder_pan_r * shoulder_lift_r * upper_arm_roll_r * elbow_flex_r ;
	wrist_r = elbow_r * forearm_roll_r * wrist_flex_r * wrist_roll_r;
	wrist_r2 = elbow_r * forearm_roll_r * wrist_flex_r;
	forearm_roll_r2 = elbow_r * forearm_roll_r;
	ee_r    = wrist_r * gripper_offset_r ;

	marginForearm = 0.30;
	marginGripper = 0.30;
	movement_speed_scale = 0.1;

	ee_r_pos = originOf(ee_r);
	elbow_r_pos = originOf(elbow_r);

	r_forearm_dist = norm(r_forearm_link_is - elbow_r * r_forearm_link_ol);
	r_gripper_dist = norm(r_gripper_palm_link_is - wrist_r * r_gripper_palm_link_ol);

	r_forearm_dist_err = marginForearm - r_forearm_dist;
	r_gripper_dist_err = marginGripper - r_gripper_dist;

	r_goal_dist = norm(ee_r_pos - pos_goal_r);

	# Feedback
	feedback = r_goal_dist;

	# Limits, weights and the like
	negVelLimitTorso = -0.02;
	posVelLimitTorso =  0.02;
	negVelLimitArm   = -0.6;
	posVelLimitArm   =  0.6;

	weightTorso = 0.001;
	weightArm   = 0.001;

	weightPositionGoal = 1;
	weightCollisionControl_forearm = 100 * max(r_forearm_dist_err * abs(r_forearm_dist_err), 0);
	weightCollisionControl_gripper = 100 * max(r_gripper_dist_err * abs(r_forearm_dist_err), 0);

	#invrot = invert(goal_frame.rot);
	invrot = invert(r_gripper_palm_link.rot);

	forearm_ol_vis = forearm_roll_r2.pos + (forearm_roll_r2.rot * r_forearm_link_ol);

	VIS__forearm__forearm_ol_vis = r_forearm_link_is - forearm_ol_vis;

	palm_ol_vis = wrist_r.pos + (wrist_r.rot * r_gripper_palm_link_ol);
	#VIS__lowC__gripper_pos  = obj_rot * (e_dir * g_ed_dist_low);
	VIS__palm__palm_ol_vis = r_gripper_palm_link_is - palm_ol_vis
}

controllableConstraints = {
	controllableConstraint(negVelLimitTorso, posVelLimitTorso, weightTorso, "torso_lift_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_shoulder_pan_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_shoulder_lift_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_upper_arm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_elbow_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_forearm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_wrist_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_gripper_joint")
}

softConstraints = {
	# Self collision
	softConstraint(movement_speed_scale * r_forearm_dist_err, movement_speed_scale * r_forearm_dist_err, weightCollisionControl_forearm, r_forearm_dist, "Collision avoidance Forearm R");
	softConstraint(movement_speed_scale * r_gripper_dist_err, movement_speed_scale * r_gripper_dist_err, weightCollisionControl_gripper, r_gripper_dist, "Collision avoidance Gripper R");

	# Goals
	softConstraint(movement_speed_scale * -r_goal_dist, movement_speed_scale * -r_goal_dist, weightPositionGoal, r_goal_dist, "r-Goal position")

	# softConstraint(r_dot_x_err, r_dot_x_err, weightPositionGoal, r_dot_x, "r-Goal pitch align");
	# softConstraint(r_dot_z_err, r_dot_z_err, weightPositionGoal, r_dot_z, "r-Goal all align")
}	

hardConstraints = {
	hardConstraint(0.0115 - j_torso_lift, 0.325 - j_torso_lift, j_torso_lift);
	
	# # Right arm constraints
	hardConstraint(-2.1353 - j_shoulder_pan_r,  0.5646 - j_shoulder_pan_r,   j_shoulder_pan_r);
	hardConstraint(-0.3536 - j_shoulder_lift_r, 1.2963 - j_shoulder_lift_r,  j_shoulder_lift_r);
	hardConstraint(-3.75   - j_upper_arm_roll_r,  0.65 - j_upper_arm_roll_r, j_upper_arm_roll_r);
	hardConstraint(-2.1213 - j_elbow_flex_r,     -0.15 - j_elbow_flex_r,     j_elbow_flex_r);
	hardConstraint(-2.0    - j_wrist_flex_r,      -0.1 - j_wrist_flex_r,     j_wrist_flex_r)
}
