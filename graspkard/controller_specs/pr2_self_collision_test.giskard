scope = {
	unitX = vec3(1,0,0);
	unitY = vec3(0,1,0);
	unitZ = vec3(0,0,1);

	# Joint input
	j_torso_lift    = inputJoint("torso_lift_joint");

	j_shoulder_pan_l  = inputJoint("l_shoulder_pan_joint");
	j_shoulder_lift_l = inputJoint("l_shoulder_lift_joint");
	j_upper_arm_roll_l= inputJoint("l_upper_arm_roll_joint");
	j_elbow_flex_l    = inputJoint("l_elbow_flex_joint");
	j_forearm_roll_l  = inputJoint("l_forearm_roll_joint");
	j_wrist_flex_l    = inputJoint("l_wrist_flex_joint");
	j_wrist_roll_l    = inputJoint("l_wrist_roll_joint");

	j_shoulder_pan_r  = inputJoint("r_shoulder_pan_joint");
	j_shoulder_lift_r = inputJoint("r_shoulder_lift_joint");
	j_upper_arm_roll_r = inputJoint("r_upper_arm_roll_joint");
	j_elbow_flex_r    = inputJoint("r_elbow_flex_joint");
	j_forearm_roll_r  = inputJoint("r_forearm_roll_joint");
	j_wrist_flex_r    = inputJoint("r_wrist_flex_joint");
	j_wrist_roll_r    = inputJoint("r_wrist_roll_joint");

	# goal input
	pos_goal_l = inputVec3("goal_pos_l");

	goal_r = inputFrame("goal_frame_r");
	pos_goal_r = goal_r.pos;
	rot_goal_r = goal_r.rot;

	# Robot
	torso_lift     = frame(rotation(unitX, 0),                vec3(-0.05, 0, 0.739675 + j_torso_lift));
	
	shoulder_pan_l   = frame(rotation(unitZ, j_shoulder_pan_l),   vec3(0, 0.188, 0));
	shoulder_lift_l  = frame(rotation(unitY, j_shoulder_lift_l),  vec3(0.1, 0, 0));
	upper_arm_roll_l = frame(rotation(unitX, j_upper_arm_roll_l), vec3(0, 0, 0));
	elbow_flex_l     = frame(rotation(unitY, j_elbow_flex_l),     vec3(0.4, 0, 0));
	forearm_roll_l   = frame(rotation(unitX, j_forearm_roll_l),   vec3(0, 0, 0));
	wrist_flex_l     = frame(rotation(unitY, j_wrist_flex_l),     vec3(0.321, 0, 0));
	wrist_roll_l     = frame(rotation(unitX, j_wrist_roll_l),     vec3(0, 0, 0));
	gripper_offset_l = frame(rotation(unitX, 0),                vec3(0.18, 0, 0));
	
	shoulder_pan_r   = frame(rotation(unitZ, j_shoulder_pan_r),   vec3(0, -0.188, 0));
	shoulder_lift_r  = frame(rotation(unitY, j_shoulder_lift_r),  vec3(0.1, 0, 0));
	upper_arm_roll_r = frame(rotation(unitX, j_upper_arm_roll_r), vec3(0, 0, 0));
	elbow_flex_r     = frame(rotation(unitY, j_elbow_flex_r),     vec3(0.4, 0, 0));
	forearm_roll_r   = frame(rotation(unitX, j_forearm_roll_r),   vec3(0, 0, 0));
	wrist_flex_r     = frame(rotation(unitY, j_wrist_flex_r),     vec3(0.321, 0, 0));
	wrist_roll_r     = frame(rotation(unitX, j_wrist_roll_r),     vec3(0, 0, 0));
	gripper_offset_r = frame(rotation(unitX, 0),                vec3(0.18, 0, 0));

	# Frame chains
	elbow_l = torso_lift * shoulder_pan_l * shoulder_lift_l * upper_arm_roll_l * elbow_flex_l ;
	wrist_l = elbow_l * forearm_roll_l * wrist_flex_l * wrist_roll_l;
	ee_l = wrist_l * gripper_offset_l ;

	elbow_r = torso_lift * shoulder_pan_r * shoulder_lift_r * upper_arm_roll_r * elbow_flex_r ;
	wrist_r = elbow_r * forearm_roll_r * wrist_flex_r * wrist_roll_r;
	ee_r    = wrist_r * gripper_offset_r ;

	marginElbow = 0.10;
	marginWrist = 0.08;
	marginEE    = 0.03;

	ee_r_pos = originOf(ee_r);
	ee_l_pos = originOf(ee_l);
	elbow_r_pos = originOf(elbow_r);
	elbow_l_pos = originOf(elbow_l);

	ee_dist = norm(ee_l_pos - ee_r_pos);
	ee_r_el_dist = norm(ee_r_pos - elbow_l_pos);
	ee_l_el_dist = norm(ee_l_pos - elbow_r_pos);
	elbow_dist = norm(elbow_r_pos - elbow_l_pos);
	wrist_dist = norm(originOf(wrist_r) - originOf(wrist_l));
	ee_r_w_dist = norm(ee_r_pos - originOf(wrist_l));
	ee_l_w_dist = norm(ee_l_pos - originOf(wrist_r));

	ee_dist_err = 2 * marginEE - ee_dist;
	ee_r_el_dist_err = marginEE + marginElbow - ee_r_el_dist;
	ee_l_el_dist_err = marginEE + marginElbow - ee_l_el_dist;
	elbow_dist_err = 2 * marginElbow - elbow_dist;
	wrist_dist_err = 2 * marginWrist - wrist_dist;
	ee_r_w_dist_err = marginEE + marginWrist - ee_r_w_dist;
	ee_l_w_dist_err = marginEE + marginWrist - ee_l_w_dist;

	r_goal_dist = norm(ee_r_pos - pos_goal_r);
	l_goal_dist = norm(ee_l_pos - pos_goal_l);

	r_dot_x = (rot_goal_r * unitX) * (ee_r.rot * unitX);
	r_dot_z = (rot_goal_r * unitZ) * (ee_r.rot * unitZ);

	r_dot_x_err = 1 - r_dot_x;
	r_dot_z_err = 1 - r_dot_z;

	# Feedback
	feedback = r_goal_dist + l_goal_dist;

	# Limits, weights and the like
	negVelLimitTorso = -0.02;
	posVelLimitTorso =  0.02;
	negVelLimitArm   = -0.6;
	posVelLimitArm   =  0.6;

	weightTorso = 0.001;
	weightArm   = 0.001;

	weightPositionGoal = 1;
	weightCollisionControl = 1000
}

controllableConstraints = {
	controllableConstraint(negVelLimitTorso, posVelLimitTorso, weightTorso, "torso_lift_joint");
	
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_shoulder_pan_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_shoulder_lift_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_upper_arm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_elbow_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_forearm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_wrist_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_wrist_roll_joint");

	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_shoulder_pan_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_shoulder_lift_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_upper_arm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_elbow_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_forearm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_wrist_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_wrist_roll_joint")
}

softConstraints = {
	# Self collision
	softConstraint(ee_dist_err, 1000, weightCollisionControl, ee_dist, "Collision avoidance EE");
	softConstraint(ee_r_el_dist_err, 1000, weightCollisionControl, ee_r_el_dist, "Collision avoidance r-EE l-elbow");
	softConstraint(ee_l_el_dist_err, 1000, weightCollisionControl, ee_l_el_dist, "Collision avoidance l-EE r-elbow");
	softConstraint(elbow_dist_err, 1000, weightCollisionControl, elbow_dist, "Collision avoidance elbows");
	softConstraint(wrist_dist_err, 1000, weightCollisionControl, wrist_dist, "Collision avoidance wrists");
	softConstraint(ee_r_w_dist_err, 1000, weightCollisionControl, ee_r_w_dist, "Collision avoidance r-EE l-wrist");
	softConstraint(ee_l_w_dist_err, 1000, weightCollisionControl, ee_l_w_dist, "Collision avoidance l-EE r-wrist");

	# Goals
	softConstraint(-r_goal_dist, -r_goal_dist, weightPositionGoal, r_goal_dist, "r-Goal position");
	softConstraint(-l_goal_dist, -l_goal_dist, weightPositionGoal, l_goal_dist, "l-Goal position");

	softConstraint(r_dot_x_err, r_dot_x_err, weightPositionGoal, r_dot_x, "r-Goal pitch align");
	softConstraint(r_dot_z_err, r_dot_z_err, weightPositionGoal, r_dot_z, "r-Goal all align")
}	

hardConstraints = {
	hardConstraint(0.0115 - j_torso_lift, 0.325 - j_torso_lift, j_torso_lift);
	# Left arm constraints
	hardConstraint(-0.5646 - j_shoulder_pan_l,  2.1353 - j_shoulder_pan_l,   j_shoulder_pan_l);
	hardConstraint(-0.3536 - j_shoulder_lift_l, 1.2963 - j_shoulder_lift_l,  j_shoulder_lift_l);
	hardConstraint(-0.65   - j_upper_arm_roll_l,  3.75 - j_upper_arm_roll_l, j_upper_arm_roll_l);
	hardConstraint(-2.1213 - j_elbow_flex_l,     -0.15 - j_elbow_flex_l,     j_elbow_flex_l);
	hardConstraint(-2.0    - j_wrist_flex_l,      -0.1 - j_wrist_flex_l,     j_wrist_flex_l);	
	
	# # Right arm constraints
	hardConstraint(-2.1353 - j_shoulder_pan_r,  0.5646 - j_shoulder_pan_r,   j_shoulder_pan_r);
	hardConstraint(-0.3536 - j_shoulder_lift_r, 1.2963 - j_shoulder_lift_r,  j_shoulder_lift_r);
	hardConstraint(-3.75   - j_upper_arm_roll_r,  0.65 - j_upper_arm_roll_r, j_upper_arm_roll_r);
	hardConstraint(-2.1213 - j_elbow_flex_r,     -0.15 - j_elbow_flex_r,     j_elbow_flex_r);
	hardConstraint(-2.0    - j_wrist_flex_r,      -0.1 - j_wrist_flex_r,     j_wrist_flex_r)
}