scope = {
	unitX = vec3(1,0,0);
	unitY = vec3(0,1,0);
	unitZ = vec3(0,0,1);

	j_torso_lift    = inputJoint("torso_lift_joint");

	j_shoulder_pan  = inputJoint("r_shoulder_pan_joint");
	j_shoulder_lift = inputJoint("r_shoulder_lift_joint");
	j_upper_arm_roll= inputJoint("r_upper_arm_roll_joint");
	j_elbow_flex    = inputJoint("r_elbow_flex_joint");
	j_forearm_roll  = inputJoint("r_forearm_roll_joint");
	j_wrist_flex    = inputJoint("r_wrist_flex_joint");
	j_wrist_roll    = inputJoint("r_wrist_roll_joint");
	j_gripper       = inputJoint("r_gripper_joint");

	obj = inputFrame("plate_frame");
	obj_pos = obj.pos;
	obj_rot = obj.rot;

	edge_r = inputScalar("edge_radius");
	edge_z = inputScalar("edge_z");
	edge_d = inputScalar("edge_depth");
	edge_ang = inputScalar("edge_angle");

	torso_lift       = frame(rotation(unitX, 0), vec3(-0.05, 0, 0.739675 + j_torso_lift));
	shoulder_pan  = frame(rotation(unitZ, j_shoulder_pan),   vec3(0, -0.188, 0));
	shoulder_lift = frame(rotation(unitY, j_shoulder_lift),  vec3(0.1, 0, 0));
	upper_arm_roll= frame(rotation(unitX, j_upper_arm_roll), vec3(0, 0, 0));
	elbow_flex    = frame(rotation(unitY, j_elbow_flex),     vec3(0.4, 0, 0));
	forearm_roll  = frame(rotation(unitX, j_forearm_roll),   vec3(0, 0, 0));
	wrist_flex    = frame(rotation(unitY, j_wrist_flex),     vec3(0.321, 0, 0));
	wrist_roll    = frame(rotation(unitX, j_wrist_roll),     vec3(0, 0, 0));

	elbow = torso_lift * shoulder_pan * shoulder_lift * upper_arm_roll * elbow_flex ;
	wrist = elbow * forearm_roll * wrist_flex * wrist_roll;
	gripper = wrist * frame(rotation(0,0,0,1), vec3(0.13,0,0));

	finger_length = 0.06;

	# Useful values
	gio = invert(obj) * gripper;

	g_rot = gripper.rot;

	gio_pos = gio.pos;
	gio_rot = gio.rot;

	gio_x = gio_rot * unitX;
	gio_z = gio_rot * unitZ;

	# Grasping
	grasp_goal = 0.01;
	grasp_err = grasp_goal - j_gripper;

	ang_scale = 10;

	# Gripper Pan
	gio_pos2d = vec3(gio_pos.x, gio_pos.y, 0);
	gio_dir2d = gio_pos2d * (1 / norm(gio_pos2d));
	center_align_ctrl = gio_z * gio_dir2d;
	center_align_err = -center_align_ctrl * ang_scale;

	# Gripper Tilt
	goalTilt = cos(edge_ang);

	tilt_ctrl = gio_x.z;
	tilt_err = (goalTilt - tilt_ctrl) * ang_scale;

	# Gripper Roll
	roll_ctrl = gio_z.z;
	roll_err = -roll_ctrl * ang_scale;

	# Gripper position in edge coords
	gie_r = norm(gio_pos2d) - edge_r;
	gie_z = gio_pos.z - edge_z;

	e_sin = sin(edge_ang);
	e_cos = cos(edge_ang);

	# Distance of gripper to edge plane
	g_ep_dist = abs(gie_r * e_cos + gie_z * -e_sin);
	g_ep_dist_err = -g_ep_dist;

	pre_err = abs(center_align_ctrl) + abs(tilt_err) + grasp_err + g_ep_dist / 0.02;
	
	g_ed_dist = gie_r * e_sin + gie_z * e_cos;
	
	ed_goal = min(edge_d - finger_length, 0);
	ed_goal_err = ed_goal - g_ed_dist;
	ed_pre  = -finger_length - 0.04; 
	ed_pre_err = ed_pre - g_ed_dist;

	# Goal position on the edge's plane
	# Based on rotational and positional alignment
	decision = pre_err - 0.12;
	g_ed_dist_low = if(decision, ed_pre_err, ed_goal_err); 
	g_ed_dist_hig = if(decision, 10, ed_goal_err);

	# Limits, weights and the like
	negVelLimitTorso = -0.02;
	posVelLimitTorso =  0.02;
	negVelLimitArm   = -0.6;
	posVelLimitArm   =  0.6;

	weightGripper = 0.001;
	weightArm   = weightGripper * 10;
	weightTorso = weightArm * 10;

	weightPositionGoal = 1;
	weightRotationGoal = 4;

	feedback = pre_err + ed_goal - g_ed_dist
}

controllableConstraints = {
	controllableConstraint(negVelLimitTorso, posVelLimitTorso, weightTorso, "torso_lift_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_shoulder_pan_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_shoulder_lift_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_upper_arm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_elbow_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_forearm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_wrist_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_wrist_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "r_gripper_joint")
}

softConstraints = {
	softConstraint(grasp_err, grasp_err, 10, j_gripper, "Gripper opening");
	
	softConstraint(g_ep_dist_err, g_ep_dist_err, weightPositionGoal, g_ep_dist, "Edge plane position");
	softConstraint(g_ed_dist_low, g_ed_dist_hig, weightPositionGoal, g_ed_dist, "Edge rim position");

	softConstraint(center_align_err, center_align_err, weightRotationGoal, center_align_ctrl, "Center align");
	softConstraint(tilt_err, tilt_err, weightRotationGoal, tilt_ctrl, "Tilt align");
	softConstraint(roll_err, roll_err, weightRotationGoal, roll_ctrl, "Roll align")
	#softConstraint(goal_pos_r_err, goal_pos_r_err, weightPositionGoal, gie_r, "Radial position");
	#softConstraint(goal_pos_z_err, goal_pos_z_err, weightPositionGoal, gie_z, "Height position")
}	

hardConstraints = {
	hardConstraint(0.0115 - j_torso_lift, 0.325 - j_torso_lift, j_torso_lift);
	
	# # Right arm constraints
	hardConstraint(-2.1353 - j_shoulder_pan,  0.5646 - j_shoulder_pan,   j_shoulder_pan);
	hardConstraint(-0.3536 - j_shoulder_lift, 1.2963 - j_shoulder_lift,  j_shoulder_lift);
	hardConstraint(-3.75   - j_upper_arm_roll,  0.65 - j_upper_arm_roll, j_upper_arm_roll);
	hardConstraint(-2.1213 - j_elbow_flex,     -0.15 - j_elbow_flex,     j_elbow_flex);
	hardConstraint(-2.0    - j_wrist_flex,      -0.1 - j_wrist_flex,     j_wrist_flex)
}