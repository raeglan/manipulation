scope = {
	unitX = vec3(1,0,0);
	unitY = vec3(0,1,0);
	unitZ = vec3(0,0,1);

	j_torso_lift    = inputJoint("torso_lift_joint");


	j_shoulder_pan  = inputJoint("l_shoulder_pan_joint");
	j_shoulder_lift = inputJoint("l_shoulder_lift_joint");
	j_upper_arm_roll= inputJoint("l_upper_arm_roll_joint");
	j_elbow_flex    = inputJoint("l_elbow_flex_joint");
	j_forearm_roll  = inputJoint("l_forearm_roll_joint");
	j_wrist_flex    = inputJoint("l_wrist_flex_joint");
	j_wrist_roll    = inputJoint("l_wrist_roll_joint");
	j_gripper       = inputJoint("l_gripper_joint");

	j_head_pan = inputJoint("head_pan_joint");
	j_head_tilt = inputJoint("head_tilt_joint");

	# Goal frame and radius
	goal = inputFrame("goal_frame");
	goal_pos = goal.pos;
	goal_rot = goal.rot;

	spat_radius = 0.5 * inputScalar("spatula_radius");
	goal_radius = inputScalar("goal_radius");

	torso_lift       = frame(rotation(unitX, 0), vec3(-0.05, 0, 0.739675 + j_torso_lift));
	head_pan   = frame(rotation(unitZ, j_head_pan), vec3(-0.01707, 0, 0.38145));
	head_tilt  = frame(rotation(unitY, j_head_tilt), vec3(-0.068, 0, 0));
	opt_frame  = torso_lift * head_pan * head_tilt * frame(rotation(unitX, 0), vec3(-0.147067, -0.0175, 0.291953));


	shoulder_pan  = frame(rotation(unitZ, j_shoulder_pan),   vec3(0, 0.188, 0));
	shoulder_lift = frame(rotation(unitY, j_shoulder_lift),  vec3(0.1, 0, 0));
	upper_arm_roll= frame(rotation(unitX, j_upper_arm_roll), vec3(0, 0, 0));
	elbow_flex    = frame(rotation(unitY, j_elbow_flex),     vec3(0.4, 0, 0));
	forearm_roll  = frame(rotation(unitX, j_forearm_roll),   vec3(0, 0, 0));
	wrist_flex    = frame(rotation(unitY, j_wrist_flex),     vec3(0.321, 0, 0));
	wrist_roll    = frame(rotation(unitX, j_wrist_roll),     vec3(0, 0, 0));

	elbow = torso_lift * shoulder_pan * shoulder_lift * upper_arm_roll * elbow_flex ;
	wrist = elbow * forearm_roll * wrist_flex * wrist_roll;
	spat = wrist * inputFrame("spatula_in_gripper");

	spat_pos = spat.pos;
	spat_rot = spat.rot;
	spatX = spat_rot * unitX;
	spatY = spat_rot * unitY;
	spatZ = spat_rot * unitZ;

	# Move spatula above goal area
	idk = cross((spat * (unitZ * spat_radius)) - goal_pos, goal_rot * unitZ);
	r_dist = 0.015 - norm(idk);
	r_dist_err = max(-r_dist, -0.1); # Limit speed to avoid harsh accelerations
	
	z_offset = min(r_dist, 0.1);
	z_pos_ctrl = spat_pos.z;
	z_pos_low = cos(asin(spatZ.z)) * spat_radius + goal_pos.z + 0.04 - z_pos_ctrl + z_offset;
	z_pos_high = 3 * spat_radius + goal_pos.z + 0.04 - z_pos_ctrl + z_offset;
	
	# Freeze rotation
	upright_ctrl = spatZ.z;
	goal_con = r_dist / goal_radius;
	upright_err = (min(1, goal_con * goal_con) - upright_ctrl);

	# Keep the gripper out of sight
	opt_pos = opt_frame.pos;
	wrist_pos = wrist.pos;
	c_vDir = opt_frame.rot * unitX;
	w2opt = opt_pos - wrist_pos;
	los_dist = norm(cross(w2opt, c_vDir)); 
	w_opt_depth = -c_vDir * w2opt;
	obstruction_coord = los_dist * if(w_opt_depth - 0.1, w_opt_depth, 20);
	low_obs_ctrl = 0.22 - obstruction_coord;

	# Keep the elbow afloat
	elbow_pos = elbow.pos;
	elbow_low = 0.9 - elbow_pos.z;

	# Keep the gripper above the goal area
	wrist_z_dist = goal_pos.z - wrist_pos.z - spat_radius;
	wrist_high_ctrl = -wrist_z_dist / spat_radius;

	# Weights
	negVelLimitTorso = -0.02;
	posVelLimitTorso =  0.02;
	negVelLimitArm   = -0.6;
	posVelLimitArm   =  0.6;

	weightGripper = 0.001;
	weightArm   = weightGripper * 10;
	weightTorso = weightArm * 10;

	weightPositionGoal = 2;
	weightRotationGoal = 4;

	feedback = spatZ.z;

	VIS__obstruction_coord = obstruction_coord;
	VIS__obs_ctrl = low_obs_ctrl;
	VIS__lookDir__opt_pos = c_vDir;
	VIS__w2opt__wrist_pos = w2opt
}

controllableConstraints = {
	controllableConstraint(negVelLimitTorso, posVelLimitTorso, weightTorso, "torso_lift_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_shoulder_pan_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_shoulder_lift_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_upper_arm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_elbow_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_forearm_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_wrist_flex_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_wrist_roll_joint");
	controllableConstraint(negVelLimitArm, posVelLimitArm, weightArm, "l_gripper_joint")
}

softConstraints = {
	softConstraint(upright_err, upright_err, weightRotationGoal, upright_ctrl, "Upright Alignment");
	softConstraint(z_pos_low, z_pos_high, weightPositionGoal, z_pos_ctrl, "Z-Position control");
	softConstraint(r_dist_err, r_dist_err, weightPositionGoal, r_dist, "Radial position");
	softConstraint(low_obs_ctrl, 100, 0.2, obstruction_coord, "Visual obstruction");
	softConstraint(elbow_low, 100, weightPositionGoal, elbow_pos.z, "Elbow");
	#softConstraint(-1000, wrist_high_ctrl, weightPositionGoal, wrist_z_dist, "Wrist z position");
	softConstraint(-0.01, -0.01, 1, j_gripper, "Keep grasped")
}	

hardConstraints = {
	hardConstraint(0.0115 - j_torso_lift, 0.325 - j_torso_lift, j_torso_lift);
	
	# # Right arm constraints
	hardConstraint(-0.5646 - j_shoulder_pan,  2.1353 - j_shoulder_pan,   j_shoulder_pan);
	hardConstraint(-0.3536 - j_shoulder_lift, 1.2963 - j_shoulder_lift,  j_shoulder_lift);
	hardConstraint(-0.65   - j_upper_arm_roll,  3.75 - j_upper_arm_roll, j_upper_arm_roll);
	hardConstraint(-2.1213 - j_elbow_flex,     -0.15 - j_elbow_flex,     j_elbow_flex);
	hardConstraint(-2.0    - j_wrist_flex,      -0.1 - j_wrist_flex,     j_wrist_flex)
}